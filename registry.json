{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "v1.0 Creates a Docker Registry service",
  "Parameters": {
    "Environment": {
      "Description": "Name of the environment to launch services into.",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "8",
      "AllowedPattern": "[a-z0-9]*",
      "ConstraintDescription": "Can contain 4 to 8 lower case alphanumeric characters."
    },
    "AvailabilityZones": {
      "Description": "AvailabilityZones to launch networking stacks into.",
      "Type": "String"
    },
    "ApplicationName": {
      "Type": "String"
    },
    "LogglyToken": {
      "Type": "String"
    },
    "NewRelicToken": {
      "Type": "String"
    },
    "BaseImageId": {
      "Type": "String",
      "AllowedPattern": "ami-[a-z0-9]{8}",
      "ConstraintDescription": "Must be a valid ami id"
    },
    "InfrastructureVPCPrivateSubnets": {
      "Description": "Subnets to launch app into.",
      "Type": "String"
    },
    "InfrastructureVPC": {
      "Description": "VPC to launch this subnet into.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "PrivateInternalHostedZone": {
      "Description": "Route53 Private Internal Hosted Zone for VPC.",
      "Type": "String"
    },
    "PrivateInternalDomain": {
      "Type": "String"
    },
    "PublicInternalHostedZone": {
      "Description": "Route53 Private Internal Hosted Zone for VPC.",
      "Type": "String"
    },
    "PublicInternalDomain": {
      "Type": "String"
    },
    "TemplateURLPrefix": {
      "Type": "String"
    },
    "InfrastructureInternalBastionSecurityGroup": {
      "Type": "String"
    }
  },
  "Outputs": {
    "ApplicationName": {
      "Value": {
        "Ref": "ApplicationName"
      }
    },
    "Version": {
      "Value": "latest"
    },
    "PublicEndPoint": {
      "Value": {
        "Fn::GetAtt": [
          "PublicDNSRecord",
          "Outputs.EndPoint"
        ]
      }
    },
    "PrivateEndPoint": {
      "Value": {
        "Fn::GetAtt": [
          "PrivateDNSRecord",
          "Outputs.EndPoint"
        ]
      }
    }
  },
  "Resources": {
    "StorageBuckets": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": "global",
          "ApplicationName": {
            "Ref": "ApplicationName"
          },
          "TemplateURLPrefix": {
            "Ref": "TemplateURLPrefix"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/s3/buckets.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      }
    },
    "AccessKeys": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": "global",
          "ApplicationName": {
            "Ref": "ApplicationName"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/s3/access_key.json"
            ]
          ]
        },
        "TimeoutInMinutes": "10"
      }
    },
    "PrivateDNSRecord": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "ApplicationName": {
            "Ref": "ApplicationName"
          },
          "HostedZoneId": {
            "Ref": "PrivateInternalHostedZone"
          },
          "HostedZoneName": {
            "Ref": "PrivateInternalDomain"
          },
          "LoadBalancerScheme": "internal",
          "LoadBalancerDNSName": {
            "Fn::GetAtt": [
              "Instances",
              "Outputs.LoadBalancerDNSName"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/web_record_set.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      }
    },
    "PublicDNSRecord": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "ApplicationName": {
            "Ref": "ApplicationName"
          },
          "HostedZoneId": {
            "Ref": "PublicInternalHostedZone"
          },
          "HostedZoneName": {
            "Ref": "PublicInternalDomain"
          },
          "LoadBalancerScheme": "internal",
          "LoadBalancerDNSName": {
            "Fn::GetAtt": [
              "Instances",
              "Outputs.LoadBalancerDNSName"
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/web_record_set.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      }
    },
    "InstanceProfile": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "ApplicationName": {
            "Ref": "ApplicationName"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/web_profile.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      }
    },
    "Security": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "Vpc": {
            "Ref": "InfrastructureVPC"
          },
          "ApplicationName": {
            "Ref": "ApplicationName"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/web_security.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      }
    },
    "Instances": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          },
          "LogglyToken": {
            "Ref": "LogglyToken"
          },
          "InstanceSecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Fn::GetAtt": [
                    "Security",
                    "Outputs.InstanceSecurityGroup"
                  ]
                },
                {
                  "Ref": "InfrastructureInternalBastionSecurityGroup"
                }
              ]
            ]
          },
          "LoadBalancerSecurityGroup": {
            "Fn::GetAtt": [
              "Security",
              "Outputs.LoadBalancerSecurityGroup"
            ]
          },
          "Scheme": "internal",
          "InstanceType": "m3.medium",
          "ApplicationName": {
            "Ref": "ApplicationName"
          },
          "AvailabilityZones": {
            "Ref": "AvailabilityZones"
          },
          "InstanceProfile": {
            "Fn::GetAtt": [
              "InstanceProfile",
              "Outputs.InstanceProfile"
            ]
          },
          "Subnets": {
            "Ref": "InfrastructureVPCPrivateSubnets"
          },
          "ImageId": {
            "Ref": "BaseImageId"
          },
          "NewRelicToken": {
            "Ref": "NewRelicToken"
          },
          "UserData": {
            "Fn::Join": [
              "",
              [
                "docker run",
                " -d",
                " --restart=always",
                " --name ",
                {
                  "Ref": "ApplicationName"
                },
                " -e SETTINGS_FLAVOR=s3",
                " -e STORAGE_PATH=/registry",
                " -e AWS_BUCKET=global-",
                {
                  "Ref": "ApplicationName"
                },
                "-private",
                " -e AWS_KEY=",
                {
                  "Fn::GetAtt": [
                    "AccessKeys",
                    "Outputs.AccessKey"
                  ]
                },
                " -e AWS_SECRET=",
                {
                  "Fn::GetAtt": [
                    "AccessKeys",
                    "Outputs.SecretAccessKey"
                  ]
                },
                " -e SEARCH_BACKEND=sqlalchemy",
                " -p 5000:5000",
                " registry:latest\n",
                "docker run",
                " -d",
                " --restart=always",
                " --link logging:logging",
                " --link ",
                {
                  "Ref": "ApplicationName"
                },
                ":",
                {
                  "Ref": "ApplicationName"
                },
                " -p 8080:8080",
                " sgarlick987/nginx-",
                {
                  "Ref": "ApplicationName"
                },
                ":latest"
              ]
            ]
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "apps/web/web_autoscaling.json"
            ]
          ]
        },
        "TimeoutInMinutes": "10"
      }
    }
  }
}