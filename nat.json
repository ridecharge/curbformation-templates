{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "v1.0 Creates NAT services.",
  "Outputs": {
    "ApplicationName": {
      "Value": {
        "Ref": "ApplicationName"
      }
    },
    "Version": {
      "Value": {
        "Ref": "ImageId"
      }
    }
  },
  "Parameters": {
    "ApplicationInternalBastionSecurityGroup": {
      "Type": "String"
    },
    "ApplicationName": {
      "Description": "Short name of the application.",
      "Type": "String"
    },
    "ApplicationVPC": {
      "Description": "Application VPC to launch services into.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "ApplicationVPCCidrBlock": {
      "Type": "String"
    },
    "ApplicationVPCPublicSubnets": {
      "Description": "Application Public Subnets to launch services into.",
      "Type": "String"
    },
    "ApplicationVpcName": {
      "Default": "application",
      "Type": "String"
    },
    "AvailabilityZones": {
      "Description": "AvailabilityZones to launch services stacks into.",
      "Type": "String"
    },
    "Environment": {
      "AllowedPattern": "[a-z0-9]*",
      "ConstraintDescription": "Can contain 4 to 8 lower case alphanumeric characters.",
      "Description": "Name of the environment to launch services into.",
      "MaxLength": "8",
      "MinLength": "4",
      "Type": "String"
    },
    "ImageId": {
      "AllowedPattern": "ami-[a-z0-9]{8}",
      "ConstraintDescription": "Must be a valid ami id",
      "Default": "ami-4e87bb26",
      "Type": "String"
    },
    "InfrastructureInternalBastionSecurityGroup": {
      "Type": "String"
    },
    "InfrastructureVPC": {
      "Description": "Infrastructure VPC to launch services into.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "InfrastructureVPCCidrBlock": {
      "Type": "String"
    },
    "InfrastructureVPCPublicSubnets": {
      "Description": "Infrastructure Public Subnets to launch services into.",
      "Type": "String"
    },
    "InfrastructureVpcName": {
      "Default": "infrastructure",
      "Type": "String"
    },
    "LogglyToken": {
      "Type": "String"
    },
    "NewRelicToken": {
      "Type": "String"
    },
    "PreviousImageId": {
      "AllowedPattern": "ami-[a-z0-9]{8}",
      "ConstraintDescription": "Must be a valid ami id",
      "Default": "ami-4e87bb26",
      "Type": "String"
    },
    "Serial": {
      "Default": "",
      "Type": "String"
    },
    "TemplateURLPrefix": {
      "Type": "String"
    }
  },
  "Resources": {
    "ApplicationVPCInstances": {
      "Properties": {
        "Parameters": {
          "AvailabilityZones": {
            "Ref": "AvailabilityZones"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "Serial": {
            "Ref": "Serial"
          },
          "ImageId": {
            "Ref": "ImageId"
          },
          "InstanceProfile": {
            "Fn::GetAtt": [
              "InstanceProfile",
              "Outputs.InstanceProfile"
            ]
          },
          "LogglyToken": {
            "Ref": "LogglyToken"
          },
          "NewRelicToken": {
            "Ref": "NewRelicToken"
          },
          "Role": {
            "Ref": "ApplicationName"
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "ApplicationInternalBastionSecurityGroup"
                },
                {
                  "Fn::GetAtt": [
                    "ApplicationVPCSecurity",
                    "Outputs.SecurityGroup"
                  ]
                }
              ]
            ]
          },
          "Subnets": {
            "Ref": "ApplicationVPCPublicSubnets"
          },
          "TemplateURLPrefix": {
            "Ref": "TemplateURLPrefix"
          },
          "TerminationPolicy": "OldestInstance",
          "UserData": {
            "Fn::Join": [
              "",
              [
                "service iptables-persistent start\n",
                "/root/startup.sh\n",
                "docker run -d --restart=always ",
                "-e LOGGLY_TOKEN=$LOGGLY_TOKEN ",
                "ridecharge/aws-startup-utils ./nat_monitor.py"
              ]
            ]
          },
          "VpcName": "application"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "services/infra/infra_autoscaling.json"
            ]
          ]
        },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "ApplicationVPCSecurity": {
      "Properties": {
        "Parameters": {
          "CidrBlock": {
            "Ref": "ApplicationVPCCidrBlock"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "Vpc": {
            "Ref": "ApplicationVPC"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "services/security_groups/nat_security.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "InfrastructureVPCInstances": {
      "Properties": {
        "Parameters": {
          "AvailabilityZones": {
            "Ref": "AvailabilityZones"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "ImageId": {
            "Ref": "ImageId"
          },
          "InstanceProfile": {
            "Fn::GetAtt": [
              "InstanceProfile",
              "Outputs.InstanceProfile"
            ]
          },
          "LogglyToken": {
            "Ref": "LogglyToken"
          },
          "NewRelicToken": {
            "Ref": "NewRelicToken"
          },
          "Role": {
            "Ref": "ApplicationName"
          },
          "Serial": {
            "Ref": "Serial"
          },
          "SecurityGroups": {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "InfrastructureInternalBastionSecurityGroup"
                },
                {
                  "Fn::GetAtt": [
                    "InfrastructureVPCSecurity",
                    "Outputs.SecurityGroup"
                  ]
                }
              ]
            ]
          },
          "Subnets": {
            "Ref": "InfrastructureVPCPublicSubnets"
          },
          "TemplateURLPrefix": {
            "Ref": "TemplateURLPrefix"
          },
          "UserData": {
            "Fn::Join": [
              "",
              [
                "service iptables-persistent start\n",
                "/root/startup.sh\n",
                "docker run -d --restart=always ",
                "-e LOGGLY_TOKEN=$LOGGLY_TOKEN ",
                "ridecharge/aws-startup-utils ./nat_monitor.py\n"
              ]
            ]
          },
          "VpcName": "infrastructure"
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "services/infra/infra_autoscaling.json"
            ]
          ]
        },
        "TimeoutInMinutes": "10"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "InfrastructureVPCSecurity": {
      "Properties": {
        "Parameters": {
          "CidrBlock": {
            "Ref": "InfrastructureVPCCidrBlock"
          },
          "Environment": {
            "Ref": "Environment"
          },
          "Vpc": {
            "Ref": "InfrastructureVPC"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "services/security_groups/nat_security.json"
            ]
          ]
        },
        "TimeoutInMinutes": "5"
      },
      "Type": "AWS::CloudFormation::Stack"
    },
    "InstanceProfile": {
      "Properties": {
        "Parameters": {
          "Environment": {
            "Ref": "Environment"
          }
        },
        "TemplateURL": {
          "Fn::Join": [
            "/",
            [
              {
                "Ref": "TemplateURLPrefix"
              },
              "services/profiles/nat_profile.json"
            ]
          ]
        },
        "TimeoutInMinutes": "30"
      },
      "Type": "AWS::CloudFormation::Stack"
    }
  }
}